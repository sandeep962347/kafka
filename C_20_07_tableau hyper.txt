import tableauserverclient as TSC

from pathlib import Path

from tableauhyperapi import HyperProcess, Telemetry, \
    Connection, CreateMode, \
    NOT_NULLABLE, NULLABLE, SqlType, TableDefinition, \
    Inserter, \
    escape_name, escape_string_literal, \
    HyperException

server_url = '#####################'
site_id = '#######'  # Optional, if using a specific site
mytoken_name = '##########'
mytoken_secret = '##########################'
project_id = '##################################'

customer_table = TableDefinition(

    table_name="Customer",
    columns=[
        TableDefinition.Column("Customer ID", SqlType.text(), NOT_NULLABLE),
        TableDefinition.Column("Customer Name", SqlType.text(), NOT_NULLABLE),
        TableDefinition.Column("Loyalty Reward Points", SqlType.big_int(), NOT_NULLABLE),
        TableDefinition.Column("Segment", SqlType.text(), NOT_NULLABLE)
    ]
)


def run_create_hyper_file_from_csv():

    print("EXAMPLE - Load data from CSV into table in new Hyper file")

    path_to_database = Path("customer100.hyper")


    process_parameters = {
        # Limits the number of Hyper event log files to two.
        "log_file_max_count": "2",
        # Limits the size of Hyper event log files to 100 megabytes.
        "log_file_size_limit": "100M"
    }

    # Starts the Hyper Process with telemetry enabled to send data to Tableau.
    # To opt out, simply set telemetry=Telemetry.DO_NOT_SEND_USAGE_DATA_TO_TABLEAU.
    with HyperProcess(telemetry=Telemetry.SEND_USAGE_DATA_TO_TABLEAU, parameters=process_parameters) as hyper:

        # Optional connection parameters.

        connection_parameters = {"lc_time": "en_US"}

        # Creates new Hyper file "customer.hyper".
        # Replaces file with CreateMode.CREATE_AND_REPLACE if it already exists.
        with Connection(endpoint=hyper.endpoint,
                        database=path_to_database,
                        create_mode=CreateMode.CREATE_AND_REPLACE,
                        parameters=connection_parameters) as connection:

            connection.catalog.create_table(table_definition=customer_table)

            # Using path to current file, create a path that locates CSV file .
            path_to_csv = str("C:\\Users\\sandeepp\\PycharmProjects\\requestlib\\customers.csv")

            # Load all rows into "Customers" table from the CSV file.
            #
            
            count_in_customer_table = connection.execute_command(
                command=f"COPY {customer_table.table_name} from {escape_string_literal(path_to_csv)} with "
                f"(format csv, NULL 'NULL', delimiter ',', header)")

            print(f"The number of rows in table {customer_table.table_name} is {count_in_customer_table}.")

        print("The connection to the Hyper file has been closed.")
    print("The Hyper process has been shut down.")


if __name__ == '__main__':
    try:
        run_create_hyper_file_from_csv()
    except HyperException as ex:
        print(ex)
        exit(1)




def uploadHyperFileToTableauServer(hyper_file_path):
    # Create a server object and establish the connection
    server = TSC.Server(server_url, use_server_version=True)
    tableau_auth = TSC.PersonalAccessTokenAuth(token_name=mytoken_name, personal_access_token=mytoken_secret,
                                               site_id=site_id)

    with server.auth.sign_in_with_personal_access_token(tableau_auth):
        print('\n\n[Logged in successfully to {}]'.format(server_url))
        new_datasource = TSC.DatasourceItem(project_id)
        print('\n\nLoading Hyper File   <', hyper_file_path, '>')
        uploadFile = server.datasources.publish(new_datasource, hyper_file_path, 'Overwrite')
        print('\nUploaded Successfully....\n')


################## Main Function #######################

hyper_file_path = 'C:\\Users\\sandeepp\\PycharmProjects\\requestlib\\customer100.hyper'
uploadHyperFileToTableauServer(hyper_file_path)
